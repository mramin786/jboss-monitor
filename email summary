{
  "name": "SmartShift Mail Summarizer",
  "nodes": [
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "plainText",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3024,
        -352
      ],
      "id": "43802a83-e6f2-45bb-9787-164711729601",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "plainText",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3024,
        -592
      ],
      "id": "87e67973-e3ad-428e-94cd-b969a2ab1255",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "plainText",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3024,
        -1232
      ],
      "id": "0bac530a-4f11-46dc-b06b-baa71f3c20dc",
      "name": "Aggregate2"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "plainText",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3024,
        -800
      ],
      "id": "2f696e6f-f0c1-4fad-ba5b-f8a6ab264fa4",
      "name": "Aggregate3"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "plainText",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3024,
        -1024
      ],
      "id": "f3c1b7eb-1dbb-48a1-8274-cd3d267df3e8",
      "name": "Aggregate4"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "output",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -1568,
        -784
      ],
      "id": "5a0ce21e-e432-47ee-b140-09e42dc8c7ec",
      "name": "Aggregate5"
    },
    {
      "parameters": {
        "numberInputs": 6
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1904,
        -848
      ],
      "id": "22035a48-2f16-48d6-ab6a-53dbeb19439a",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=Analyze email content to identify and summarize system alerts with severity classification.\n\n## Task\nExtract system alerts from email content and categorize by severity and impact.\n\n## Severity Levels\n- **Critical**: Outages, security breaches, data loss, payment failures\n- **High**: Performance issues, backup failures, SSL expiry, DB problems  \n- **Medium**: Resource warnings, maintenance notices, config changes\n- **Low**: Updates, completions, routine notifications, optimization tips\n\n## Alert Types\n- **Ongoing**: Active issues requiring attention\n- **Resolved**: Completed incidents for tracking\n- **Scheduled**: Planned maintenance/changes\n- **Informational**: Status updates, no action needed\n\n## Output Format\n```\n## System Alerts Summary\n### [System Name] - [Total: X alerts]\n**Critical** ([count]):\n- [Timestamp]: [Alert] → [Action needed] [Deadline if any]\n\n**High** ([count]):\n- [Timestamp]: [Alert] → [Action needed] [Deadline if any]\n\n**Medium** ([count]):\n- [Timestamp]: [Alert] → [Brief summary]\n\n**Low** ([count]):\n- [Timestamp]: [Alert] → [Brief summary]\n```\n\n## Instructions\n- Group alerts by affected system or service\n- Extract timestamps when available\n- Focus on business impact over technical details\n- Prioritize by severity and urgency\n- If no system alerts found, respond: \"No system alerts detected\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2688,
        -1232
      ],
      "id": "5cce398a-3b20-42fc-9f8f-0d8ac4d38fd2",
      "name": "System Alerts\t AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=\nAnalyze email content to identify and summarize emails dedicated to specific users.\n\n## Task\nExtract user-specific emails and categorize by recipient, priority, and required actions.\n\n## Categories\n- **Direct**: Emails addressed directly to user\n- **Mentioned**: User referenced in content\n- **Role-based**: Sent to user's department/role\n- **Action**: Requires user response/action\n\n## Priority Levels\n- **Urgent**: C-level/supervisor emails, same-day deadlines, emergencies\n- **High**: 48hr deadlines, key stakeholders, client issues\n- **Normal**: Regular updates, routine tasks, non-urgent meetings\n- **Low**: FYI emails, announcements, flexible deadlines\n\n## Output Format\n```\n## User-Specific Emails Summary\n\n### [User Name] - [Total: X emails]\n**Urgent** ([count]):\n- [Sender]: [Subject] → [Action needed] [Deadline if any]\n\n**High** ([count]):\n- [Sender]: [Subject] → [Action needed] [Deadline if any]\n\n**Normal** ([count]):\n- [Sender]: [Subject] → [Brief summary]\n\n**Low** ([count]):\n- [Sender]: [Subject] → [Brief summary]\n```\n\n## Instructions\n- Identify users by names, roles, direct addressing, or \"your/you\" references\n- Prioritize by sender importance and deadlines\n- Keep summaries to 1 sentence\n- List urgent actions with deadlines first\n- If no user-specific emails found, respond: \"No user-specific emails detected\"\n\n\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2688,
        -1024
      ],
      "id": "a345666b-99f5-4073-9cda-3ac7f84dc5e1",
      "name": "User-Specific\t AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=\nAnalyze email content to identify and summarize daily calendar events and meeting-related information.\n\n## Task\nExtract calendar events, meeting invites, schedule changes, and time-sensitive appointments from email content.\n\n## Event Types\n- **Meetings**: Team meetings, client calls, 1:1s, conferences\n- **Deadlines**: Project due dates, submission deadlines, milestones\n- **Appointments**: Personal appointments, interviews, reviews\n- **Events**: Company events, training, social gatherings\n\n## Priority Levels\n- **Critical**: Same-day events, client meetings, executive calls\n- **High**: Tomorrow's events, important deadlines, key meetings\n- **Medium**: This week's events, regular team meetings\n- **Low**: Future events, optional attendance, FYI events\n\n## Output Format\n```\n## Daily Calendar Events Summary\n\n### Today ([Date]) - [Total: X events]\n**Critical** ([count]):\n- [Time]: [Event Type] - [Title/Description] | [Location/Platform] | [Attendees if key]\n\n**High** ([count]):\n- [Time]: [Event Type] - [Title/Description] | [Location/Platform]\n\n### Tomorrow ([Date]) - [Total: X events]\n- [Time]: [Event Type] - [Title/Description] | [Location/Platform]\n\n### This Week - [Total: X events]\n- [Date/Time]: [Event Type] - [Title/Description]\n\n### Schedule Changes/Updates\n- [Original] → [New]: [Reason/Details]\n```\n\n## Instructions\n- Extract times, dates, locations, and attendee information\n- Identify meeting platforms (Zoom, Teams, Google Meet)\n- Note schedule changes, cancellations, or rescheduling\n- Flag preparation requirements or pre-meeting materials\n- Prioritize by timing and attendee importance\n- If no calendar events found, respond: \"No calendar events detected\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2688,
        -800
      ],
      "id": "1a7b8475-ba07-4fb0-ad3e-b5578df562f1",
      "name": "Calendar / Schedule AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=Analyze email content to identify and summarize pending emails, tasks, and actions requiring user attention.\n\n## Task\nExtract all pending actions, follow-ups, approvals, and tasks that need completion or response.\n\n## Action Types\n- **Response Required**: Emails needing replies, confirmations, decisions\n- **Approvals**: Budget approvals, document sign-offs, access requests\n- **Tasks**: Assignments, deliverables, project work\n- **Follow-ups**: Overdue items, status updates, check-ins\n\n## Urgency Levels\n- **Overdue**: Past deadline, multiple reminders\n- **Today**: Due today, same-day response needed\n- **This Week**: Due within 7 days\n- **Future**: Longer-term actions, no immediate deadline\n\n## Output Format\n```\n## Pending Actions Summary\n\n### Overdue ([count])\n- **[Action Type]**: [Description] | **From**: [Sender] | **Due**: [Original deadline]\n\n### Due Today ([count])\n- **[Action Type]**: [Description] | **From**: [Sender] | **Deadline**: [Time if specified]\n\n### Due This Week ([count])\n- **[Action Type]**: [Description] | **From**: [Sender] | **Due**: [Date]\n\n### Future Actions ([count])\n- **[Action Type]**: [Description] | **From**: [Sender] | **Due**: [Date]\n\n### Quick Actions (< 5 min)\n- [Simple tasks that can be completed quickly]\n\n### Waiting For\n- [Items pending responses from others]\n```\n\n## Instructions\n- Identify action verbs: \"please review\", \"need approval\", \"respond by\", \"complete\"\n- Extract deadlines and due dates\n- Flag overdue items with original dates\n- Separate quick wins from complex tasks  \n- Note dependencies on others' responses\n- Track email threads requiring follow-up\n- If no pending actions found, respond: \"No pending actions detected\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2688,
        -592
      ],
      "id": "40efcd3c-8136-4f26-9c48-ccc4571e112a",
      "name": "Pending Tasks / Action Required\tAI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=Analyze email content to identify and summarize general communications, announcements, and miscellaneous emails that don't fit other categories.\n\n## Task\nExtract and categorize general emails including company updates, newsletters, informational content, and uncategorized communications.\n\n## Categories\n- **Announcements**: Company news, policy updates, organizational changes\n- **Newsletters**: Industry updates, marketing emails, subscriptions\n- **Informational**: Reports, documentation, reference materials\n- **Administrative**: HR notices, IT updates, facility information\n- **External**: Vendor communications, partner updates, third-party notices\n- **Uncategorized**: Emails that don't fit other specific categories\n\n## Importance Levels\n- **Important**: Leadership communications, policy changes, compliance notices\n- **Relevant**: Department updates, industry news, useful information\n- **Informational**: General announcements, newsletters, reference materials\n- **Low Priority**: Marketing emails, optional events, general notices\n\n## Output Format\n```\n## General & Other Emails Summary\n\n### Important ([count])\n- **[Category]**: [Subject] | **From**: [Sender] | **Summary**: [Key points]\n\n### Relevant ([count])  \n- **[Category]**: [Subject] | **From**: [Sender] | **Summary**: [Brief description]\n\n### Informational ([count])\n- **[Category]**: [Subject] | **From**: [Sender] | **Type**: [Content type]\n\n### Low Priority ([count])\n- **[Category]**: [Subject] | **From**: [Sender]\n\n### Key Updates\n- [Important announcements or changes that affect operations]\n\n### Industry/Market News\n- [Relevant external updates or market information]\n\n### Reference Materials\n- [Documentation, guides, or resources for future reference]\n```\n\n## Instructions\n- Identify company-wide communications and leadership messages\n- Separate internal announcements from external communications\n- Flag policy changes, compliance notices, and important updates\n- Group similar newsletter/subscription emails together\n- Note useful reference materials and documentation\n- Exclude emails already categorized as alerts, user-specific, calendar, or actions\n- If no general emails found, respond: \"No general emails detected\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2688,
        -352
      ],
      "id": "f43ec4bd-b7e7-4768-bf7a-582a39f6ace1",
      "name": "Other / General AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=\nYou are an expert email summary consolidator. Your task is to combine outputs from 5 specialized email analysis agents and create a unified, prioritized summary for executive decision-making.\n\n## Input Sources\nYou will receive analysis from these 5 agents:\n1. **System Alerts Agent** - Technical issues and system health\n2. **User-Specific Emails Agent** - Individual user communications\n3. **Calendar Events Agent** - Meetings and time-sensitive events  \n4. **Pending Actions Agent** - Tasks and follow-ups requiring action\n5. **General & Other Agent** - Company updates and miscellaneous content\n6. **Outlook Calendar Agent** - Specific event details, accept/decline statuses, and updates from Outlook\n\n## Task\nCreate a comprehensive executive summary that prioritizes information by business impact and urgency.Consolidate information from both the Calendar Events Agent and the Outlook Calendar Agent into a single, de-duplicated schedule.\n\n\n\n## Output Format\nAlways return your final answer as JSON:\n\n{\n  \"output\": {\n    \"subject\": \"<short, clear subject line for the email>\",\n    \"html\": \"<full HTML summary>\",\n    \"text\": \"<full plain text summary>\"\n  }\n}\n\n### Subject Rules\n- Keep it under 80 characters  \n- Summarize the most urgent and important point from the report  \n- Include date (YYYY-MM-DD)  \n- Example: `\"Critical Security Alerts & Key Updates — 2025-08-13\"`\n\n### HTML Summary Structure\nGenerate HTML format with the following structure:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Executive Email Summary</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 1rem;\n            background: #f9f9f9;\n            color: #222;\n        }\n        h1, h2, h3 {\n            margin-top: 1rem;\n            margin-bottom: 0.5rem;\n        }\n        h1 { font-size: 1.8rem; }\n        h2 { font-size: 1.4rem; border-left: 4px solid #004d40; padding-left: 0.5rem; }\n        h3 { font-size: 1.1rem; }\n        header {\n            background: #004d40;\n            color: #fff;\n            padding: 0.75rem 1rem;\n            margin-bottom: 1rem;\n        }\n        ul, ol { padding-left: 1.2rem; margin: 0.5rem 0; }\n        ul li, ol li { margin-bottom: 0.5rem; }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 0.5rem;\n            margin-bottom: 1rem;\n        }\n        th, td { border: 1px solid #ccc; padding: 0.5rem 0.8rem; text-align: left; }\n        th { background: #e0f2f1; }\n        blockquote {\n            background: #eee;\n            padding: 0.5rem 1rem;\n            margin: 0.8rem 0;\n            border-left: 4px solid #004d40;\n        }\n        section { margin-bottom: 2rem; }\n        footer {\n            font-size: 0.8rem;\n            text-align: center;\n            margin-top: 2rem;\n            color: #555;\n        }\n        hr {\n            border: 0;\n            height: 1px;\n            background: #ccc;\n        }\n    </style>\n</head>\n<body>\n\n    <header>\n        <h1>Executive Email Summary - 2025-08-13</h1>\n        <p><strong>Total Emails Processed:</strong> 42</p>\n    </header>\n\n    <main>\n        <section>\n            <h2>Critical Items Requiring Immediate Attention (Next 4 Hours)</h2>\n\n            <h3>System Security Alerts</h3>\n            <ul>\n                <li><strong>Corporate Email Account (user***@example.com)</strong> – Unrecognized third-party app named “DemoApp” was granted access to the account.</li>\n                <li><strong>Internal Dev Portal</strong> – Unexpected profile modifications (name and recovery email change) were detected for a privileged account.</li>\n            </ul>\n\n            <h3>Urgent Actions Required</h3>\n            <ul>\n                <li>Verify and immediately revoke “DemoApp” access if unauthorized. <strong>Owner:</strong> IT Security | <strong>Timeline:</strong> Within 1 hour</li>\n                <li>Reset password for the Dev Portal account and enforce Multi-Factor Authentication (MFA). <strong>Owner:</strong> Account Owner / IT Security | <strong>Timeline:</strong> Within 2 hours</li>\n            </ul>\n        </section>\n\n        <section>\n            <h2>Priority Actions Summary</h2>\n\n            <h3>User-Specific Actions by Priority</h3>\n            <ul>\n                <li><strong>John Doe:</strong>\n                    <ul>\n                        <li><strong>High:</strong> 2 items – \"Third-party app access review\" & \"Profile change validation\" | <strong>Deadline:</strong> 2025-08-14</li>\n                        <li><strong>Medium:</strong> 1 item – \"Update notification settings for Q3 reports\" | <strong>Deadline:</strong> 2025-08-16</li>\n                    </ul>\n                </li>\n                 <li><strong>Finance Team:</strong>\n                    <ul>\n                        <li><strong>Medium:</strong> 1 item – \"Submit final Q3 budget proposal\" | <strong>Deadline:</strong> 2025-08-20</li>\n                    </ul>\n                </li>\n            </ul>\n\n            <h3>Approvals Pending</h3>\n            <ul>\n                <li>Q3 Departmental Budget | <strong>Status:</strong> Awaiting submission from Finance Team</li>\n                <li>New Vendor Contract (CloudServices Inc.) | <strong>Status:</strong> Awaiting final review from Legal</li>\n            </ul>\n        </section>\n\n        <section>\n            <h2>Today's Schedule Highlights (Wednesday, August 13)</h2>\n            <table>\n                <tr>\n                    <th>Time (IST)</th>\n                    <th>Event</th>\n                    <th>Notes</th>\n                </tr>\n                <tr>\n                    <td>09:30 AM</td>\n                    <td>Team Standup Meeting</td>\n                    <td>Standard daily check-in</td>\n                </tr>\n                <tr>\n                    <td>11:00 AM</td>\n                    <td>Project Titan Review</td>\n                    <td>Client attending; prepare status slides.</td>\n                </tr>\n                 <tr>\n                    <td>02:00 PM</td>\n                    <td>1-on-1: Manager Sync</td>\n                    <td>Discuss security alerts and team allocation.</td>\n                </tr>\n            </table>\n            <p><strong>Schedule Changes:</strong> None reported by Outlook or Calendar agents.</p>\n        </section>\n\n        <section>\n            <h2>Key Metrics & Status</h2>\n            <table>\n                <tr>\n                    <th>Metric</th>\n                    <th>Value</th>\n                    <th>Source / Details</th>\n                </tr>\n                <tr>\n                    <td>Email Volume</td>\n                    <td>42</td>\n                    <td>User-Specific: 21 | General: 15 | System Alerts: 3 | Calendar: 3</td>\n                </tr>\n                <tr>\n                    <td>Alert Distribution</td>\n                    <td>Critical: 2 | High: 1 | Medium: 0</td>\n                    <td>Two critical security alerts and one high-priority performance alert (DB server) detected.</td>\n                </tr>\n                <tr>\n                    <td>System Health</td>\n                    <td><strong>Action Required</strong></td>\n                    <td>Security events require immediate investigation and remediation.</td>\n                </tr>\n                 <tr>\n                    <td>Pending Actions</td>\n                    <td>5</td>\n                    <td>2 High-Priority, 2 Medium-Priority, 1 Low-Priority</td>\n                </tr>\n            </table>\n\n            <blockquote>\n                Key Insight: The two critical security alerts targeting user accounts suggest a potential coordinated phishing or credential compromise attempt. Immediate, decisive action is crucial to prevent lateral movement or data exfiltration.\n            </blockquote>\n        </section>\n\n        <section>\n            <h2>Strategic & General Updates</h2>\n            <ul>\n                <li><strong>Leadership Communications:</strong> An all-hands meeting is being scheduled for next week to discuss the annual performance review cycle.</li>\n                <li><strong>Policy Changes:</strong> None.</li>\n                <li><strong>Market/Industry News:</strong> Competitor 'InnovateCorp' has launched a new AI-driven analytics platform, which may impact our Q4 product roadmap.</li>\n            </ul>\n        </section>\n\n        <section>\n            <h2>Upcoming Deadlines (Next 7 Days)</h2>\n            <table>\n                <tr>\n                    <th>Date</th>\n                    <th>Item</th>\n                    <th>Owner</th>\n                    <th>Priority</th>\n                </tr>\n                <tr>\n                    <td>2025-08-14</td>\n                    <td>Third-party app access review</td>\n                    <td>John Doe / IT Security</td>\n                    <td><strong>Critical</strong></td>\n                </tr>\n                <tr>\n                    <td>2025-08-14</td>\n                    <td>Dev Portal profile validation & password reset</td>\n                    <td>John Doe / IT Security</td>\n                    <td><strong>Critical</strong></td>\n                </tr>\n                 <tr>\n                    <td>2025-08-16</td>\n                    <td>Update notification settings for Q3 reports</td>\n                    <td>John Doe</td>\n                    <td>Medium</td>\n                </tr>\n            </table>\n        </section>\n\n        <section>\n            <h2>Executive Recommendations</h2>\n\n            <h3>Immediate Actions (Next 24 Hours)</h3>\n            <ol>\n                <li><strong>Revoke \"DemoApp\" Access:</strong> Direct the IT Security team to immediately revoke the app's token and analyze its activity. <strong>Desired Outcome:</strong> Unauthorized access removed and scope of access understood.</li>\n                <li><strong>Secure Developer Portal Account:</strong> Mandate an immediate password reset and MFA enforcement for the affected user. <strong>Desired Outcome:</strong> Account secured against further unauthorized changes.</li>\n                <li><strong>Initiate Account Access Audit:</strong> Task IT Security with auditing access logs for both affected systems for any other suspicious activity in the last 72 hours. <strong>Desired Outcome:</strong> Confirmation of whether the breach is isolated or widespread.</li>\n            </ol>\n\n            <h3>Resource Allocation</h3>\n            <ul>\n                <li>Dedicate one senior security analyst to lead the incident response for the next 48 hours.</li>\n                <li>Prepare a communication draft for all employees regarding a mandatory password security reminder.</li>\n            </ul>\n\n            <h3>Follow-ups (Next 7 Days)</h3>\n            <ul>\n                <li>Review third-party application approval policies. | <strong>Due:</strong> 2025-08-20</li>\n                <li>Deliver a post-incident report detailing the root cause and remediation steps. | <strong>Due:</strong> 2025-08-22</li>\n            </ul>\n\n            <hr>\n            <p><strong>Executive Summary:</strong> Two critical security alerts indicate active, unauthorized access to at least two corporate systems. Immediate action is required to contain the threat by revoking access and securing the accounts. An urgent audit is necessary to determine the full scope of the potential breach and protect organizational assets.\n            </p>\n        </section>\n    </main>\n\n    <footer>\n        <hr>\n        <p>Report generated: 2025-08-13 17:23 IST | Next update: 2025-08-14 08:00 IST</p>\n    </footer>\n\n</body>\n</html>\n```\n\n### Plain Text Summary Structure\n**Plain Text Version: Include all the same information in a readable text format with:\n\nHeadings\n\nBulleted and numbered lists\n\nTables represented using text (use pipes | or indentation)\n\nInsights and executive summary clearly shown\n\n\n## Consolidation Rules\n1. **Use Specific Details**: Include account names, specific numbers, exact times\n2. **Prioritize by Business Impact**: Critical security and client issues first\n3. **Remove Duplicates**: Eliminate overlapping information across agents\n4. **Quantify Everything**: Use tables, counts, and specific metrics\n5. **Executive Perspective**: Focus on decisions needed, not operational details\n6. **Include Insights**: Add analytical observations in quote blocks\n7. **Bottom Line**: Always end with a clear executive summary\n\n## Instructions\n- Process all 5 agent outputs together\n- Cross-reference information for conflicts or duplications\n- Use tables and structured formatting for clarity\n- Include specific details (account names, counts, times)\n- Provide actionable insights with business context\n- Keep technical jargon minimal\n- If any agent reports \"no items detected\", show \"None\" in relevant sections\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1360,
        -784
      ],
      "id": "62269b5a-66db-402f-bfc8-09a2fd886305",
      "name": "Master Email Summary Consolidation AI Agent"
    },
    {
      "parameters": {
        "resource": "event",
        "limit": 10,
        "output": "raw",
        "filters": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -4208,
        -496
      ],
      "id": "6faac08b-525b-48af-9900-0a13c3b8b6a2",
      "name": "Get many events",
      "webhookId": "8f0ff434-2bee-4e15-9e0d-824978e21cdc",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "LzVANcF3q6H97rYT",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ JSON.stringify($json.content) }}\n\n",
        "options": {
          "systemMessage": "=Analyze raw calendar data (e.g., from an API, iCal feed, or JSON object) and generate a clear, organized, and actionable summary of the user's schedule for a specified period.\n\nTask\nSummarize all scheduled events for a given timeframe (e.g., today, this week). Extract key details, identify scheduling conflicts, and present the information in a scannable, agenda-style format.\n\nEvent Types to Differentiate\nMeeting: An event with multiple attendees requiring collaboration.\n\nAppointment: A scheduled commitment, typically with one or two people (e.g., doctor's visit, 1-on-1).\n\nTask/Reminder: A block of time for personal work or a reminder (e.g., \"Finish report,\" \"Call bank\").\n\nAll-Day Event: An event spanning the entire day, often informational (e.g., Holiday, Birthday, Out of Office).\n\nTime-Based Grouping\nRecently Passed: Events that just concluded today.\n\nToday: All remaining events for the current day.\n\nTomorrow: All events for the following day.\n\nThis Week: Events scheduled for the rest of the current week (excluding today and tomorrow).\n\nLater: Significant events beyond this week.\n\nOutput Format\n## Calendar Summary for: [Date Range]\n\n**Today's Highlights**: [Total Events] events, [X] meetings, [Y] hours of free time.\n\n### Conflicts & Overlaps ([count])\n- **[Time]**: [Event 1 Title] overlaps with [Event 2 Title]\n\n### Today,{{ $now }} ([count])\n- **[Start Time] - [End Time]** - [Event Title] | **Type**: [Meeting/Appointment] | **Location/Link**: [Teams Link/Conference Room] | **Attendees**: [Count]\n\n### Tomorrow, August 14, 2025 ([count])\n- **[Start Time] - [End Time]** - [Event Title] | **Type**: [Appointment] | **Location/Link**: [Address] | **Organizer**: [Name]\n- **All Day** - [Event Title] | **Type**: [All-Day Event]\n\n### This Week ([count])\n- **[Day, Date]**: [Start Time] - [Event Title] | **Location**: [Details]\n\n### Later ([count])\n- **[Day, Date]**: [Event Title]\n\n### Recently Passed Today ([count])\n- **[Start Time] - [End Time]** - [Event Title] | **Type**: [Meeting]\nInstructions\nTime Accuracy: Parse start and end times precisely. All times must be converted and displayed in the user's local timezone (India Standard Time).\n\nCurrent Context: Use the current time ({{ $now }}) to determine which events are \"Recently Passed,\" \"Today,\" \"Tomorrow,\" etc.\n\nDuration: Calculate and display the duration for each event within the time slot (e.g., 02:00 PM - 02:30 PM).\n\nDetails: Extract the primary location or the online meeting URL. Do not include the entire body unless it's a short note.\n\nParticipants: Note the number of attendees or the name of the organizer if relevant.\n\nConflict Detection: Explicitly check for and highlight any events whose time ranges overlap. This is the highest priority after the summary.\n\nClarity over Detail: The goal is a scannable summary. Avoid overly verbose descriptions.\n\nEmpty State: If no events are found for the requested period, respond with: \"Your calendar for this period is clear.\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2688,
        -128
      ],
      "id": "76ba5383-f5a7-4fb0-971d-4bbb8f43927d",
      "name": "Other / General AI Agent1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "=System Alerts",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a5ca0e68-4733-414d-a41f-5d7074791eb5"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "197154f5-fb2f-49f3-bda5-721c86142336",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "User-Specific",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0ef05eba-ecaf-4179-a523-01983f9f7dbb",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Calendar / Schedule",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a541201d-58cd-4950-8cbc-8de571df5ad8",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Pending Tasks / Action Required",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "99af794c-f98b-444e-b97e-424aec122cfb",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Other / General",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3472,
        -832
      ],
      "id": "01182308-ad7f-4f09-885a-d06c863dcf97",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "/**\n * =================================================================\n * n8n-Compatible Email Classifier\n *\n * This script is designed to run in the n8n \"Code\" node.\n * It takes input items, classifies them, and returns them in the\n * format that n8n requires.\n * =================================================================\n */\n\n// --- 1. CONFIGURATION: Define Categories and Keywords ---\n// You can customize these categories and keywords to better fit your needs.\nconst CATEGORIES = {\n    SYSTEM_ALERTS: 'System Alerts',\n    USER_SPECIFIC: 'User-Specific',\n    CALENDAR_SCHEDULE: 'Calendar / Schedule',\n    PENDING_TASKS: 'Pending Tasks / Action Required',\n    OTHER_GENERAL: 'Other / General'\n};\n\nconst KEYWORD_MAP = {\n    [CATEGORIES.PENDING_TASKS]: [\n        'action required',\n        'approval needed',\n        'please respond',\n        'response required'\n    ],\n    [CATEGORIES.SYSTEM_ALERTS]: [\n        'alert',\n        'warning',\n        'error',\n        'critical notification',\n        'security',\n        'new app',\n        'access to your data',\n        'updated the preferences',\n        'change your password'\n    ],\n    [CATEGORIES.CALENDAR_SCHEDULE]: [\n        'meeting',\n        'invite',\n        'schedule',\n        'calendar',\n        'event',\n        'join online'\n    ],\n    [CATEGORIES.USER_SPECIFIC]: [\n        'your account',\n        'your profile',\n        'congratulations',\n        'congrajualatuion', // Handling a common typo\n        'welcome to'\n    ],\n    [CATEGORIES.OTHER_GENERAL]: [\n        'shop now',\n        'deals',\n        'sale',\n        'unsubscribe',\n        'view in browser',\n        'promotion'\n    ]\n};\n\n\n// --- 2. THE CLASSIFIER FUNCTION (The Core Logic) ---\n// This function takes a text string and returns a category.\nfunction classifyEmail(plainText) {\n    if (!plainText || typeof plainText !== 'string') {\n        return CATEGORIES.OTHER_GENERAL;\n    }\n\n    const lowerCaseText = plainText.toLowerCase();\n\n    for (const category in KEYWORD_MAP) {\n        const keywords = KEYWORD_MAP[category];\n        for (const keyword of keywords) {\n            if (lowerCaseText.includes(keyword.toLowerCase())) {\n                return category;\n            }\n        }\n    }\n\n    return CATEGORIES.OTHER_GENERAL;\n}\n\n\n// --- 3. n8n EXECUTION LOGIC ---\n// This part processes each input item from n8n.\n// The special 'items' variable holds all the data from the previous node.\n\nconst outputItems = items.map(item => {\n    // Get the plain text from the input item.\n    // IMPORTANT: Make sure your input data has a field named 'plainText'.\n    // If it's named something else (e.g., 'text' or 'body'), change it here.\n    const textToClassify = item.json.plainText;\n\n    // Run the classifier function on the text.\n    const category = classifyEmail(textToClassify);\n\n    // Create a new data object for the output.\n    // We use '...' to copy all existing fields from the input item's JSON,\n    // and then we add our new 'category' field to it.\n    const newJsonData = {\n        ...item.json,\n        category: category\n    };\n\n    // Return the item in the format n8n expects: { json: { ... } }\n    return {\n        json: newJsonData\n    };\n});\n\n// The final line of the script MUST be the return statement.\n// This sends the processed items to the next node in your workflow.\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3664,
        -784
      ],
      "id": "2078f30c-e31b-4683-82a6-c85716618543",
      "name": "Email Classifier"
    },
    {
      "parameters": {
        "jsCode": "// This node takes calendar events, cleans them, and outputs a SINGLE item\n// with all cleaned events nested under a \"content\" key.\n\n// Get all incoming items.\nconst items = $input.all();\n\n// Map over ALL incoming items and collect their .json properties into a single array.\nconst allEvents = items.map(item => item.json);\n\nconst cleanedEvents = [];\n\n// Define the target timezone. 'Asia/Kolkata' is the IANA name for India Standard Time.\nconst targetTimeZone = 'Asia/Kolkata';\n\n// Define formatting options for human-readable dates and times.\nconst dateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n  hour12: true,\n  timeZone: targetTimeZone,\n};\n\nconst dateFormatOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    timeZone: targetTimeZone,\n}\n\n// The processing logic for each event remains the same.\nfor (const event of allEvents) {\n  if (event.isCancelled) {\n    continue;\n  }\n\n  const startDate = new Date(event.start.dateTime);\n  const endDate = new Date(event.end.dateTime);\n  let formattedStart, formattedEnd, duration;\n\n  if (event.isAllDay) {\n    const allDayEndDate = new Date(endDate.getTime() - (24 * 60 * 60 * 1000));\n    formattedStart = startDate.toLocaleDateString('en-IN', dateFormatOptions);\n    formattedEnd = allDayEndDate.toLocaleDateString('en-IN', dateFormatOptions);\n    duration = 'All Day';\n  } else {\n    formattedStart = startDate.toLocaleString('en-IN', dateTimeFormatOptions);\n    formattedEnd = endDate.toLocaleString('en-IN', dateTimeFormatOptions);\n    const durationMs = endDate.getTime() - startDate.getTime();\n    duration = Math.round(durationMs / (1000 * 60)) + ' minutes';\n  }\n\n  const meetingType = event.isOnlineMeeting ? 'Online' : 'Physical';\n  let meetingDetails = 'N/A';\n  if (event.isOnlineMeeting) {\n    meetingDetails = event.onlineMeeting?.joinUrl || 'No Join Link Found';\n  } else if (event.locations && event.locations.length > 0) {\n    meetingDetails = event.locations[0].displayName || 'No Location Specified';\n  }\n\n  const attendeesList = event.attendees?.map(attendee => attendee.emailAddress.address) || [];\n\n  const cleanedEvent = {\n    title: event.subject,\n    isAllDay: event.isAllDay,\n    start: formattedStart,\n    end: formattedEnd,\n    duration: duration,\n    meetingType: meetingType,\n    details: meetingDetails,\n    organizer: event.organizer.emailAddress.address,\n    attendees: attendeesList,\n  };\n\n  cleanedEvents.push(cleanedEvent);\n}\n\n// ===================================================================\n// MODIFIED OUTPUT SECTION\n// Instead of creating many items, we now return a SINGLE item.\n// This single item has a 'content' key that holds the entire array of cleaned events.\n// This is ideal for passing the full schedule to an AI model.\nreturn [{\n  json: {\n    content: cleanedEvents\n  }\n}];\n// ==================================================================="
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4032,
        -496
      ],
      "id": "5ac1717b-38ff-45ea-960b-280ce9915e94",
      "name": "calendar clean"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Custom code node for n8n - Extract plain text and received date from email\nfunction htmlToPlainText(htmlContent) {\n    if (!htmlContent) return '';\n    \n    let text = htmlContent\n        // Remove script and style blocks first\n        .replace(/<script[^>]*>.*?<\\/script>/gis, '')\n        .replace(/<style[^>]*>.*?<\\/style>/gis, '')\n        \n        // Remove HTML comments\n        .replace(/<!--.*?-->/gs, '')\n        \n        // Convert common block elements to line breaks\n        .replace(/<\\/?(div|p|br|h[1-6]|li|tr)[^>]*>/gi, '\\n')\n        .replace(/<\\/?(ul|ol|table|tbody|thead)[^>]*>/gi, '\\n\\n')\n        \n        // Remove all remaining HTML tags\n        .replace(/<[^>]*>/g, '')\n        \n        // Decode HTML entities\n        .replace(/&nbsp;/gi, ' ')\n        .replace(/&amp;/gi, '&')\n        .replace(/&lt;/gi, '<')\n        .replace(/&gt;/gi, '>')\n        .replace(/&quot;/gi, '\"')\n        .replace(/&#39;/gi, \"'\")\n        .replace(/&#x27;/gi, \"'\")\n        .replace(/&#x2F;/gi, '/')\n        .replace(/&apos;/gi, \"'\")\n        \n        // Clean up whitespace\n        .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n')  // Replace multiple line breaks\n        .replace(/[ \\t]+/g, ' ')           // Replace multiple spaces/tabs with single space\n        .replace(/\\n /g, '\\n')             // Remove spaces at beginning of lines\n        .replace(/ \\n/g, '\\n')             // Remove spaces at end of lines\n        .trim();                           // Remove leading/trailing whitespace\n    \n    return text;\n}\n\n// Extract data from the email\nconst emailData = $json;\n\n// Get HTML content from email body\nconst htmlContent = emailData.body?.content || '';\n\n// Convert to plain text\nconst plainText = htmlToPlainText(htmlContent);\n\n// Get received date\nconst receivedDate = emailData.receivedDateTime || '';\n\n// Return both values\nreturn {\n    plainText: plainText,\n    receivedDate: receivedDate,\n    subject: emailData.subject || '',\n    sender: emailData.sender?.emailAddress?.address || ''\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4032,
        -784
      ],
      "id": "43ff9f83-38b4-40a5-99eb-9847f5c2f2e1",
      "name": "Email plain text"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"output\": {\n    \"subject\": \"<short, clear subject line for the email>\",\n    \"html\": \"<full HTML summary>\",\n    \"text\": \"<full plain text summary>\"\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1216,
        -576
      ],
      "id": "2fec01dc-3182-4a7a-9f53-ccea7715a962",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "subject": "={{ $json.output.subject }}",
        "bodyContent": "={{ $json.output.html }}",
        "additionalFields": {
          "bodyContentType": "html"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -1008,
        -784
      ],
      "id": "61999607-be3c-4bd6-8656-b0df5c85291a",
      "name": "Send a message1",
      "webhookId": "cf25b4e3-2eb7-438b-93ca-f54c090cf07c",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "LzVANcF3q6H97rYT",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1.1,
      "position": [
        -2688,
        192
      ],
      "id": "6cb214cf-b4c7-4054-97b5-50bb91b49a39",
      "name": "AWS Bedrock Chat Model"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1.1,
      "position": [
        -1360,
        -576
      ],
      "id": "fc5e09b5-2e59-43a5-917a-a35ee189bd5c",
      "name": "AWS Bedrock Chat Model1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 20,
        "output": "raw",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -4208,
        -784
      ],
      "id": "3cf6bd3c-97a4-4b76-b9ec-b2d6c8e3b070",
      "name": "Get many messages1",
      "webhookId": "883ab1d4-8c2f-4cd2-a30e-3de94a85c119",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "LzVANcF3q6H97rYT",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Email Date Filter - Only process emails received yesterday\n// This runs daily at 8:30 AM and filters emails from the previous day\n\nfunction isYesterday(dateString, userTimezone = 'UTC') {\n    if (!dateString) return false;\n    \n    // Parse the email date (assuming it's in UTC as per your data format)\n    const emailDate = new Date(dateString);\n    \n    // Get current date in user timezone\n    const now = new Date();\n    const todayInUserTz = new Date(now.toLocaleString(\"en-US\", {timeZone: userTimezone}));\n    \n    // Calculate yesterday in user timezone\n    const yesterdayInUserTz = new Date(todayInUserTz);\n    yesterdayInUserTz.setDate(todayInUserTz.getDate() - 1);\n    \n    // Convert email date to user timezone for comparison\n    const emailInUserTz = new Date(emailDate.toLocaleString(\"en-US\", {timeZone: userTimezone}));\n    \n    // Compare dates (year, month, day only)\n    return emailInUserTz.getFullYear() === yesterdayInUserTz.getFullYear() &&\n           emailInUserTz.getMonth() === yesterdayInUserTz.getMonth() &&\n           emailInUserTz.getDate() === yesterdayInUserTz.getDate();\n}\n\n// Alternative: Simple UTC-based comparison (if all dates are in UTC)\nfunction isYesterdayUTC(dateString) {\n    if (!dateString) return false;\n    \n    const emailDate = new Date(dateString);\n    const now = new Date();\n    \n    // Calculate yesterday in UTC\n    const yesterday = new Date(now);\n    yesterday.setUTCDate(now.getUTCDate() - 1);\n    \n    // Compare UTC dates\n    return emailDate.getUTCFullYear() === yesterday.getUTCFullYear() &&\n           emailDate.getUTCMonth() === yesterday.getUTCMonth() &&\n           emailDate.getUTCDate() === yesterday.getUTCDate();\n}\n\n// For testing: Check if email is from a specific date\nfunction isFromDate(dateString, targetDate, userTimezone = 'UTC') {\n    if (!dateString) return false;\n    \n    const emailDate = new Date(dateString);\n    const target = new Date(targetDate);\n    \n    // Convert both to user timezone for comparison\n    const emailInUserTz = new Date(emailDate.toLocaleString(\"en-US\", {timeZone: userTimezone}));\n    const targetInUserTz = new Date(target.toLocaleString(\"en-US\", {timeZone: userTimezone}));\n    \n    return emailInUserTz.getFullYear() === targetInUserTz.getFullYear() &&\n           emailInUserTz.getMonth() === targetInUserTz.getMonth() &&\n           emailInUserTz.getDate() === targetInUserTz.getDate();\n}\n\n// Main filter logic\nconst emailData = $json;\n\n// Get all items to check if any emails from yesterday exist\nconst allItems = $input.all();\n\n// Set your timezone here\nconst USER_TIMEZONE = 'Asia/Kolkata'; // Change this to your actual timezone\n\n// Check if ANY email from yesterday exists in the entire batch\nconst yesterdayEmailsFound = allItems.some(item => {\n    const itemReceivedDate = item.json.receivedDateTime || item.json.receivedDate || '';\n    return isYesterday(itemReceivedDate, USER_TIMEZONE);\n});\n\n// If no emails from yesterday found, return the no_emails_message (only for the first item)\nif (!yesterdayEmailsFound && $itemIndex === 0) {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayFormatted = yesterday.toLocaleDateString(\"en-US\", {\n        timeZone: USER_TIMEZONE,\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n    \n    return {\n        type: 'no_emails_message',\n        message: `No emails were received yesterday (${yesterdayFormatted})`,\n        date: yesterday.toISOString(),\n        timezone: USER_TIMEZONE,\n        filterDate: new Date().toISOString()\n    };\n}\n\n// If no emails from yesterday found and this is not the first item, filter out\nif (!yesterdayEmailsFound) {\n    return null;\n}\n\n// Get the received date from current email\nconst receivedDate = emailData.receivedDateTime || emailData.receivedDate || '';\n\n// Check if current email was received yesterday\nconst isFromYesterday = isYesterday(receivedDate, USER_TIMEZONE);\n\n// Alternative: Use UTC-only comparison if all your dates are in UTC\n// const isFromYesterday = isYesterdayUTC(receivedDate);\n\n// For testing specific dates, you can use:\n// const isFromYesterday = isFromDate(receivedDate, '2025-08-13', USER_TIMEZONE);\n\nif (isFromYesterday) {\n    return {\n        ...emailData,\n        isFromYesterday: true,\n        filterDate: new Date().toISOString(),\n        receivedDate: receivedDate\n    };\n} else {\n    // Filter out emails that are not from yesterday\n    return null;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3856,
        -784
      ],
      "id": "f61e27be-277f-4d71-9e20-cae1b8f1dc10",
      "name": "Date filter"
    },
    {
      "parameters": {
        "jsCode": "// This node filters calendar events for the NEXT 7 DAYS starting from today\n// Works with already cleaned calendar data format\n// Gets events from today + next 6 days\n\n// Get all incoming items\nconst items = $input.all();\n\n// Extract the content array from the first item\nconst allEvents = items[0]?.json?.content || [];\n\nconst weekEvents = [];\n\n// Get next 7 days starting from today\nconst now = new Date();\n\n// Create array of next 7 dates starting from today\nconst next7Days = [];\nfor (let i = 0; i < 7; i++) {\n  const date = new Date(now);\n  date.setDate(now.getDate() + i);\n  const dateString = date.toLocaleDateString('en-GB', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    timeZone: 'Asia/Kolkata'\n  });\n  next7Days.push(dateString);\n}\n\nconsole.log(`Looking for events for next 7 days: ${next7Days[0]} to ${next7Days[6]}`);\n\n// Helper function to parse date from the formatted string\nfunction parseDateFromString(dateString) {\n  if (!dateString) return null;\n  \n  // Handle all-day events (format: \"12 August 2025\")\n  if (!dateString.includes(' at ')) {\n    try {\n      return new Date(dateString + ' 00:00:00');\n    } catch (e) {\n      return null;\n    }\n  }\n  \n  // Handle timed events (format: \"12 August 2025 at 11:00 am\")\n  try {\n    const [datePart, timePart] = dateString.split(' at ');\n    const fullDateString = `${datePart} ${timePart}`;\n    return new Date(fullDateString);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Helper function to check if event is in next 7 days\nfunction isInNext7Days(eventStartString) {\n  const eventDate = parseDateFromString(eventStartString);\n  if (!eventDate || isNaN(eventDate.getTime())) {\n    return false;\n  }\n  \n  // Compare just the date part (ignore time)\n  const eventDateString = eventDate.toLocaleDateString('en-GB', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    timeZone: 'Asia/Kolkata'\n  });\n  \n  return next7Days.includes(eventDateString);\n}\n\n// Filter events for next 7 days\nfor (const event of allEvents) {\n  if (isInNext7Days(event.start)) {\n    weekEvents.push(event);\n    console.log(`Found upcoming event: ${event.title} - ${event.start}`);\n  }\n}\n\nconsole.log(`Found ${weekEvents.length} events for next 7 days`);\n\n// Return filtered events - events for next 7 days starting today\nreturn [{\n  json: {\n    content: weekEvents\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3856,
        -496
      ],
      "id": "c785ee7a-2cca-407a-9cfe-d959c8cfca71",
      "name": "Date filter1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "30 8 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -4544,
        32
      ],
      "id": "ef6605ac-a8dd-49c4-9177-85ac07a4a8e7",
      "name": "Schedule Trigger",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -4544,
        -656
      ],
      "id": "c705972e-35cd-4e9a-87e3-df5bd1721299",
      "name": "When clicking ‘Execute workflow’"
    }
  ],
  "pinData": {},
  "connections": {
    "Aggregate": {
      "main": [
        [
          {
            "node": "Other / General AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Pending Tasks / Action Required\tAI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        [
          {
            "node": "System Alerts\t AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Calendar / Schedule AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate4": {
      "main": [
        [
          {
            "node": "User-Specific\t AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate5": {
      "main": [
        [
          {
            "node": "Master Email Summary Consolidation AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "System Alerts\t AI Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User-Specific\t AI Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Calendar / Schedule AI Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Pending Tasks / Action Required\tAI Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Other / General AI Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Master Email Summary Consolidation AI Agent": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many events": {
      "main": [
        [
          {
            "node": "calendar clean",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Other / General AI Agent1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Classifier": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calendar clean": {
      "main": [
        [
          {
            "node": "Date filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email plain text": {
      "main": [
        [
          {
            "node": "Date filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Master Email Summary Consolidation AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages1": {
      "main": [
        [
          {
            "node": "Email plain text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date filter": {
      "main": [
        [
          {
            "node": "Email Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date filter1": {
      "main": [
        [
          {
            "node": "Other / General AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        []
      ]
    },
    "AWS Bedrock Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Other / General AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Other / General AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Pending Tasks / Action Required\tAI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Calendar / Schedule AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "User-Specific\t AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "System Alerts\t AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AWS Bedrock Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Master Email Summary Consolidation AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get many messages1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d7425fdf-6679-4155-a611-2d6cc3b6dbd1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09a62427b893cbce6a70c07c8d422be777ecbe8f3170f355def7cd13e185cf96"
  },
  "id": "0JwcWpODvkhQZpnk",
  "tags": [
    {
      "name": "v4",
      "id": "EZFS6vlVEzx0jJcp",
      "createdAt": "2025-09-01T06:15:57.082Z",
      "updatedAt": "2025-09-01T06:15:57.082Z"
    }
  ]
}
